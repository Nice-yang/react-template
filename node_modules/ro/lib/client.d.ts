import { Client as JaysonClient, Server as JaysonServer, ClientOptions, RequestParamsLike, JSONRPCCallbackType, JSONRPCResultLike, JSONRPCErrorLike } from "jayson";
import { NotifyCallback } from "./utils";
export interface RequestOptions {
    [name: string]: any;
}
export interface JSONRPCResponse {
    error: JSONRPCErrorLike;
    result: JSONRPCResultLike;
}
export declare class Client extends JaysonClient {
    options: {
        [name: string]: any;
    };
    constructor(server: JaysonServer, options?: ClientOptions);
    constructor(options: ClientOptions);
    remcall(method: string, params: RequestParamsLike, id?: string, options?: RequestOptions, callback?: JSONRPCCallbackType): Promise<JSONRPCResponse> | undefined;
    remcall(method: string, params: RequestParamsLike, id?: string, callback?: JSONRPCCallbackType): Promise<JSONRPCResponse> | undefined;
    remcall(method: string, params: RequestParamsLike, options?: RequestOptions, callback?: JSONRPCCallbackType): Promise<JSONRPCResponse> | undefined;
    remcall(method: string, params: RequestParamsLike, callback?: JSONRPCCallbackType): Promise<JSONRPCResponse> | undefined;
    ready(cb: NotifyCallback): void;
    close(): Promise<any>;
    close(cb: NotifyCallback): undefined;
    static mqtt(client: any, options?: any, logger?: any): Client;
}
