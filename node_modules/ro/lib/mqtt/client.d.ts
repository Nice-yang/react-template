/// <reference types="node" />
import mqttr = require('mqttr');
import { Client } from '../client';
import { NotifyCallback } from "../utils";
interface MQTTClientOptions {
    [name: string]: any;
}
interface Pending {
    timer: NodeJS.Timer;
    done: (err?: any, data?: any) => void;
}
declare const _default: {
    new (client: any, options?: string | MQTTClientOptions | undefined, logger?: any): {
        options: any;
        client: mqttr.Client;
        topic: string;
        logger: any;
        subscriptions: {
            [topic: string]: mqttr.Subscription;
        };
        pendings: {
            [ids: string]: Pending;
        };
        idmap: {
            [id: string]: string[];
        };
        _owns: boolean;
        _request(request: any, options: any, callback: any): void;
        _handleResponse(topic: any, payload: any): any;
        _removePending(ids: any, isTimeout?: boolean | undefined): Pending | undefined;
        ready(cb: NotifyCallback): any;
        close(cb?: NotifyCallback | undefined): any;
        remcall(method: string, params: import("jayson").RequestParamsLike, id?: string | undefined, options?: import("../client").RequestOptions | undefined, callback?: import("jayson").JSONRPCCallbackTypePlain | import("jayson").JSONRPCCallbackTypeSugared | undefined): Promise<import("../client").JSONRPCResponse> | undefined;
        remcall(method: string, params: import("jayson").RequestParamsLike, id?: string | undefined, callback?: import("jayson").JSONRPCCallbackTypePlain | import("jayson").JSONRPCCallbackTypeSugared | undefined): Promise<import("../client").JSONRPCResponse> | undefined;
        remcall(method: string, params: import("jayson").RequestParamsLike, options?: import("../client").RequestOptions | undefined, callback?: import("jayson").JSONRPCCallbackTypePlain | import("jayson").JSONRPCCallbackTypeSugared | undefined): Promise<import("../client").JSONRPCResponse> | undefined;
        remcall(method: string, params: import("jayson").RequestParamsLike, callback?: import("jayson").JSONRPCCallbackTypePlain | import("jayson").JSONRPCCallbackTypeSugared | undefined): Promise<import("../client").JSONRPCResponse> | undefined;
        request(method: string, params: import("jayson").RequestParamsLike, id?: string | undefined, callback?: import("jayson").JSONRPCCallbackTypePlain | import("jayson").JSONRPCCallbackTypeSugared | undefined): import("jayson").JSONRPCRequest;
        request(method: string, params: import("jayson").RequestParamsLike, callback?: import("jayson").JSONRPCCallbackTypePlain | import("jayson").JSONRPCCallbackTypeSugared | undefined): import("jayson").JSONRPCRequest;
        request(method: import("jayson").JSONRPCRequestLike[], callback?: import("jayson").JSONRPCCallbackTypeBatchPlain | import("jayson").JSONRPCCallbackTypeBatchSugared | undefined): import("jayson").JSONRPCRequest[];
        addListener(event: string | symbol, listener: (...args: any[]) => void): any;
        on(event: string | symbol, listener: (...args: any[]) => void): any;
        once(event: string | symbol, listener: (...args: any[]) => void): any;
        prependListener(event: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(event: string | symbol, listener: (...args: any[]) => void): any;
        off(event: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol | undefined): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(event: string | symbol): Function[];
        rawListeners(event: string | symbol): Function[];
        emit(event: string | symbol, ...args: any[]): boolean;
        eventNames(): (string | symbol)[];
        listenerCount(type: string | symbol): number;
    };
    create(client: any, options?: string | MQTTClientOptions | undefined, logger?: any): {
        options: any;
        client: mqttr.Client;
        topic: string;
        logger: any;
        subscriptions: {
            [topic: string]: mqttr.Subscription;
        };
        pendings: {
            [ids: string]: Pending;
        };
        idmap: {
            [id: string]: string[];
        };
        _owns: boolean;
        _request(request: any, options: any, callback: any): void;
        _handleResponse(topic: any, payload: any): any;
        _removePending(ids: any, isTimeout?: boolean | undefined): Pending | undefined;
        ready(cb: NotifyCallback): any;
        close(cb?: NotifyCallback | undefined): any;
        remcall(method: string, params: import("jayson").RequestParamsLike, id?: string | undefined, options?: import("../client").RequestOptions | undefined, callback?: import("jayson").JSONRPCCallbackTypePlain | import("jayson").JSONRPCCallbackTypeSugared | undefined): Promise<import("../client").JSONRPCResponse> | undefined;
        remcall(method: string, params: import("jayson").RequestParamsLike, id?: string | undefined, callback?: import("jayson").JSONRPCCallbackTypePlain | import("jayson").JSONRPCCallbackTypeSugared | undefined): Promise<import("../client").JSONRPCResponse> | undefined;
        remcall(method: string, params: import("jayson").RequestParamsLike, options?: import("../client").RequestOptions | undefined, callback?: import("jayson").JSONRPCCallbackTypePlain | import("jayson").JSONRPCCallbackTypeSugared | undefined): Promise<import("../client").JSONRPCResponse> | undefined;
        remcall(method: string, params: import("jayson").RequestParamsLike, callback?: import("jayson").JSONRPCCallbackTypePlain | import("jayson").JSONRPCCallbackTypeSugared | undefined): Promise<import("../client").JSONRPCResponse> | undefined;
        request(method: string, params: import("jayson").RequestParamsLike, id?: string | undefined, callback?: import("jayson").JSONRPCCallbackTypePlain | import("jayson").JSONRPCCallbackTypeSugared | undefined): import("jayson").JSONRPCRequest;
        request(method: string, params: import("jayson").RequestParamsLike, callback?: import("jayson").JSONRPCCallbackTypePlain | import("jayson").JSONRPCCallbackTypeSugared | undefined): import("jayson").JSONRPCRequest;
        request(method: import("jayson").JSONRPCRequestLike[], callback?: import("jayson").JSONRPCCallbackTypeBatchPlain | import("jayson").JSONRPCCallbackTypeBatchSugared | undefined): import("jayson").JSONRPCRequest[];
        addListener(event: string | symbol, listener: (...args: any[]) => void): any;
        on(event: string | symbol, listener: (...args: any[]) => void): any;
        once(event: string | symbol, listener: (...args: any[]) => void): any;
        prependListener(event: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(event: string | symbol, listener: (...args: any[]) => void): any;
        off(event: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol | undefined): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(event: string | symbol): Function[];
        rawListeners(event: string | symbol): Function[];
        emit(event: string | symbol, ...args: any[]): boolean;
        eventNames(): (string | symbol)[];
        listenerCount(type: string | symbol): number;
    };
    mqtt(client: any, options?: any, logger?: any): Client;
    http(options?: import("jayson").HttpClientOptions | undefined): import("jayson").HttpClient;
    https(options?: import("jayson").HttpsClientOptions | undefined): import("jayson").HttpsClient;
    tcp(options?: import("jayson").TcpClientOptions | undefined): import("jayson").TcpClient;
    tls(options?: import("jayson").TlsClientOptions | undefined): import("jayson").TlsClient;
    listenerCount(emitter: import("events").EventEmitter, event: string | symbol): number;
    defaultMaxListeners: number;
    EventEmitter: typeof import("events").EventEmitter;
};
export = _default;
