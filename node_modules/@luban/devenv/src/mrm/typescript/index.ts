import {json, install, packageJson} from "mrm-core";
import MrmTask from "../../types/MrmTask";

const getOptionName = function getOptionName(name: string) {
    return `compilerOptions.${name}`;
};

const defInclude = [
    "./src/**/*.tsx",
    "./src/**/*.ts"
];

const defExclude = [
    "dist",
    "node_modules",
    "**/*.spec.ts",
    "__tests__",
];

const task: MrmTask = function typescript() {
    const tsconfig = json(
        "tsconfig.json",
        {
            compilerOptions: {
                target: "es2015",
                jsx: "preserve",
            }
        }
    );
    // 不支持es5之前的语法
    const target = tsconfig.get(getOptionName("target"));
    if ((target === "es3") || (target === "es5")) {
        tsconfig.set(getOptionName("target"), "es2015");
    }

    const pkgJson = packageJson();
    const deps = Object.keys({...pkgJson.get("dependencies", {}), ...pkgJson.get("peerDependencies", {})});
    if (deps.includes("react")) {
        tsconfig.set(getOptionName("jsx"), "react");
    }


    tsconfig
        // 默认开关
        .set(getOptionName("moduleResolution"), "node")
        .set(getOptionName("module"), "commonjs")
        .set(getOptionName("declaration"), true)
        .set(getOptionName("declarationMap"), true)
        .set(getOptionName("sourceMap"), true)
        .set(getOptionName("outDir"), "./dist")
        .set(getOptionName("rootDir"), "./src")
        .set(getOptionName("composite"), true)
        // 编译检查
        .set(getOptionName("strict"), true)
        .set(getOptionName("noImplicitAny"), true)
        .set(getOptionName("strictNullChecks"), true)
        .set(getOptionName("strictFunctionTypes"), true)
        .set(getOptionName("strictBindCallApply"), true)
        .set(getOptionName("strictPropertyInitialization"), true)
        .set(getOptionName("noImplicitThis"), true)
        .set(getOptionName("alwaysStrict"), true)
        .set(getOptionName("noUnusedLocals"), true)
        .set(getOptionName("noUnusedParameters"), true)
        .set(getOptionName("noImplicitReturns"), true)
        .set(getOptionName("noFallthroughCasesInSwitch"), true)
        .set(getOptionName("noEmitOnError"), true)
        // 便利属性
        .set(getOptionName("skipLibCheck"), true)
        .set(getOptionName("esModuleInterop"), true)
        .set(getOptionName("allowUmdGlobalAccess"), true)
        .set(getOptionName("incremental"), true)
        // 文件属性
        .set(getOptionName("removeComments"), true)
        .set(getOptionName("newLine"), "lf")
        // typings
        .set(getOptionName("typeRoots"), ["./node_modules/@types", "./typings"]);

    const tsInclude: string[] = tsconfig.get("include", defInclude);
    defInclude.forEach((v) => {
        if (!tsInclude.includes(v)) {
            tsInclude.push(v);
        }
    });
    const tsExclude: string[] = tsconfig.get("exclude", defExclude);
    defExclude.forEach((v) => {
        if (!tsExclude.includes(v)) {
            tsExclude.push(v);
        }
    });

    tsconfig.set("include", tsInclude);
    tsconfig.set("exclude", tsExclude);

    tsconfig.save();

    const ciConfig = json(
        "tsconfig.ci.json",
        {
            extends: "./tsconfig.json",
            compilerOptions: {
                rootDir: "./",
            },
        }
    );
    ciConfig.save();

    pkgJson
        .setScript("clean", "rm -rf dist")
        .appendScript("clean", "rm -f tsconfig.tsbuildinfo")
        .setScript("build", "yarn tsc")
        .setScript("build:clean", "yarn clean")
        .appendScript("build:clean", "yarn build")
        .setScript("build:watch", "yarn tsc -w")
        .save();

    install({typescript: "^3.7.3"}, {yarn: true});
};

task.description = "Setup typescript for Luban developer";

export = task;
